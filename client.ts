//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * Get userInfo
   * @return Ok
   */
  accountsGET(id: number): Promise<Anonymous> {
    let url_ = this.baseUrl + "/accounts/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processAccountsGET(_response);
    });
  }

  protected processAccountsGET(response: Response): Promise<Anonymous> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Anonymous.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<Anonymous>(null as any);
  }

  /**
   * Create new account
   * @return Operation succeeded.
   */
  accountsPOST(body: number, id: number): Promise<void> {
    let url_ = this.baseUrl + "/accounts/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processAccountsPOST(_response);
    });
  }

  protected processAccountsPOST(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class Anonymous implements IAnonymous {
  name?: string;
  surname?: string;
  balance?: number;
  transactions?: Transactions[];

  [key: string]: any;

  constructor(data?: IAnonymous) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.name = _data["Name"];
      this.surname = _data["Surname"];
      this.balance = _data["Balance"];
      if (Array.isArray(_data["Transactions"])) {
        this.transactions = [] as any;
        for (let item of _data["Transactions"])
          this.transactions!.push(Transactions.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Anonymous {
    data = typeof data === "object" ? data : {};
    let result = new Anonymous();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data["Name"] = this.name;
    data["Surname"] = this.surname;
    data["Balance"] = this.balance;
    if (Array.isArray(this.transactions)) {
      data["Transactions"] = [];
      for (let item of this.transactions)
        data["Transactions"].push(item.toJSON());
    }
    return data;
  }
}

export interface IAnonymous {
  name?: string;
  surname?: string;
  balance?: number;
  transactions?: Transactions[];

  [key: string]: any;
}

export class Transactions implements ITransactions {
  senderID?: string;
  recieverID?: string;
  amount?: number;
  /** date and time the transaction occured */
  timestamp?: Date;

  [key: string]: any;

  constructor(data?: ITransactions) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.senderID = _data["senderID"];
      this.recieverID = _data["recieverID"];
      this.amount = _data["amount"];
      this.timestamp = _data["timestamp"]
        ? new Date(_data["timestamp"].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): Transactions {
    data = typeof data === "object" ? data : {};
    let result = new Transactions();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data["senderID"] = this.senderID;
    data["recieverID"] = this.recieverID;
    data["amount"] = this.amount;
    data["timestamp"] = this.timestamp
      ? this.timestamp.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface ITransactions {
  senderID?: string;
  recieverID?: string;
  amount?: number;
  /** date and time the transaction occured */
  timestamp?: Date;

  [key: string]: any;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
